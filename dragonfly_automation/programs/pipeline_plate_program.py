
import os
import numpy as np

from dragonfly_automation import (
    operations, assessments
)

from dragonfly_automation.gateway import gateway_utils
from dragonfly_automation.programs import pipeline_plate_settings as settings


class PipelinePlateProgram(object):


    def __init__(self, data_dirpath=None, env='dev'):

        self.env = env
        self.data_dirpath = data_dirpath

        # program settings
        self.settings = settings

        # the maximum number of FOVs (z-stacks) to acquire per well
        # (note that if few FOVs pass the confluency test, 
        # we may end up with fewer than this number of stacks)
        self.max_num_stacks_per_well = 8

        # stage labels for convenience
        self.xystage_label = 'XYStage'
        self.zstage_label = settings.stack_settings.stage_label

        # create the py4j objects
        self.gate, self.mm_studio, self.mm_core = gateway_utils.get_gate(env=env)

        # initialize/open the multipage TIFF 'store'
        if env=='prod':
            self.datastore = self._initialize_datastore()
        
        if env=='dev':
            # no mock yet for the datastore object
            self.datastore = None



    def _initialize_datastore(self):

        if self.data_dirpath is None:
            raise ValueError('A data directory must be provided')

        os.makedirs(self.data_dirpath, exist_ok=True)

        # these arguments for createMultipageTIFFDatastore are copied from Nathan's script
        should_generate_separate_metadata = True
        should_split_positions = True

        datastore = self.mm_studio.data().createMultipageTIFFDatastore(
            self.data_dirpath, 
            should_generate_separate_metadata, 
            should_split_positions)

        self.mm_studio.displays().createDisplay(datastore)
        return datastore


    def setup(self):
        '''
        Generic microscope setup
        set the autofocus mode and run the `mm_core.assignImageSynchro` calls

        '''

        # change the autofocus mode to AFC
        af_manager = self.mm_studio.getAutofocusManager()
        af_manager.setAutofocusMethodByName("Adaptive Focus Control")

        # these `assignImageSynchro` calls are copied directly from Nathan's script
        # TODO: check with Bryant if these are necessary
        self.mm_core.assignImageSynchro(self.zstage_label)
        self.mm_core.assignImageSynchro(self.xystage_label)
        self.mm_core.assignImageSynchro(self.mm_core.getShutterDevice())
        self.mm_core.assignImageSynchro(self.mm_core.getCameraDevice())

        # turn on auto shutter mode 
        # (this means that the shutter automatically opens and closes when an image is acquired)
        self.mm_core.setAutoShutter(True)


    def cleanup(self):
        '''
        Commands that should be run after the acquisition is complete
        (that is, at the very end of self.run)
        '''

        if self.datastore:
            self.datastore.freeze()


    @staticmethod
    def is_new_well(position_label):
        '''
        This is the logic Nathan used to determine 
        whether a position is the first position visited in a new well

        Note that the position_label is assumed to have been generated by 
        the 96-well-plate position plugin for MicroManager
        '''
        is_new_well = ('Site_0' in position_label) or ('Pos_000_000' in position_label)
        return is_new_well


    def run(self):
        '''
        The main acquisition workflow
        
        The outermost loop is over all of the positions loaded into MicroManager
        (that is, all positions returned by `mm_studio.getPositionList()`)
        
        *** We assume that these positions were generated by the 96-well-plate platemap/position plugin ***

        In particular, we assume that the list of positions corresponds 
        to some number of FOVs in some number of distinct wells,
        and that all of the FOVs in each well appear together.

        At each position, the following steps are performed:

            1) move to the new position (this moves the xy-stage and the FocusDrive z-stage)
            3) check if the new position is the first position of a new well
               (if it is, we will need to run the autoexposure method)
            4) check if we have already acquired enough FOVs/stacks for the current well
               (if we do, we'll skip the position)
            5) run autofocus, run autoexposure, assess confluency, and acquire the stacks 
               (see self.maybe_acquire_stacks)

        '''

        # keep track of how many stacks have been acquired from the current well
        num_stacks_from_current_well = 0

        position_list = self.mm_studio.getPositionList()
        for position_ind in range(position_list.getNumberOfPositions()):
            print('\n-------- Imaging position %d --------' % position_ind)

            # Here, note that `goToPosition` moves only the stage specified in the position list,
            # which should always be the 'XYStage', *not* the 'PiezoZ' stage

            # TODO: think about moving the goToPosition line after the num_stacks check;
            # this would prevent needlessly moving the stage to any 'extra' positions in a well,
            # but might introduce dangerously long stage movements when moving to a new well
            position = position_list.getPosition(position_ind)
            position.goToPosition(position, self.mm_core)

            # check if the position is the first one in a new well
            if self.is_new_well(position.getLabel()):

                # only autoexpose on the first position of a new well
                run_autoexposure = True

                # reset the stack counter
                num_stacks_from_current_well = 0

                # reset the GFP channel settings to their default values
                # (they will be adjusted later by the autoexposure algorithm)
                self.settings.gfp_channel.reset()

            else:
                # do not run autoexposure; use existing/current GFP exposure settings
                run_autoexposure = False

            # check if we have already acquired enough FOVs from the current well
            if num_stacks_from_current_well >= self.max_num_stacks_per_well:
                continue
            
            # assess the position and maybe acquire stacks
            did_acquire_stacks = self.maybe_acquire_stacks(position_ind, run_autoexposure)
            if did_acquire_stacks:
                num_stacks_from_current_well += 1

        self.cleanup()
    
    
    def maybe_acquire_stacks(self, position_ind, run_autoexposure=False):
        '''
        Attempt to acquire z-stacks at the current x-y position

        Performs the following steps:

        1) autofocus using the DAPI channel
        2) run the confluency test
        3) run the autoexposure method using the GFP channel (if run_autoexposure=True)
        4) acquire a z-stack in DAPI and GFP channels and 'put' the stacks in self.datastore

        '''

        # whether we acquired stacks at this position
        did_acquire_stacks = False
    
        # autofocus using DAPI 
        operations.change_channel(self.mm_core, self.settings.dapi_channel)
        operations.autofocus(self.mm_studio, self.mm_core)    

        # confluency assessment (also using DAPI)
        im = operations.acquire_snap(self.gate, self.mm_studio)
        confluency_is_good, confluency_label = assessments.assess_confluency(im)

        if not confluency_is_good:
            print("Warning: confluency test failed (label='%s')" % confluency_label)
            if self.env=='dev':
                print("Warning: confluency test results are ignored in 'dev' mode")
            else:
                return did_acquire_stacks

        # -----------------------------------------------------------------
        #
        # Autoexposure for the GFP channel 
        # *if* the current position is the first FOV of a new well
        # (Note that laser power and exposure time are modified in-place)
        #
        # -----------------------------------------------------------------
        if run_autoexposure:
            operations.change_channel(self.mm_core, self.settings.gfp_channel)
            autoexposure_did_succeed = operations.autoexposure(
                self.gate,
                self.mm_studio,
                self.mm_core,
                self.settings.stack_settings,
                self.settings.autoexposure_settings,
                self.settings.gfp_channel)

            if not autoexposure_did_succeed:
                # TODO: decide how to handle this situation
                print('Warning: autoexposure failure; continuing anyway')

        # -----------------------------------------------------------------
        #
        # Acquire the stacks
        #
        # -----------------------------------------------------------------
        channels = [self.settings.dapi_channel, self.settings.gfp_channel]
        for channel_ind, channel_settings in enumerate(channels):

            # change the channel
            operations.change_channel(self.mm_core, channel_settings)

            # acquire the stack
            operations.acquire_stack(
                self.mm_studio,
                self.mm_core, 
                self.datastore, 
                self.settings.stack_settings,
                position_ind=position_ind,
                channel_ind=channel_ind)
    
        # if we're still here, we assume tha the stacks were acquired successfully
        # TODO: implement explicit error handling
        did_acquire_stacks = True
        return did_acquire_stacks


